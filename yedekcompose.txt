
#Filebeat
  filebeat01:
   depends_on:
     es01:
       condition: service_healthy
   image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
   user: root
   volumes:
     - certs:/usr/share/filebeat/certs
     - filebeatdata01:/usr/share/filebeat/data
     - ./config/filebeat/filebeat_ingest_data/:/usr/share/filebeat/ingest_data/
     - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
     - /var/lib/docker/containers:/var/lib/docker/containers:ro
     - /var/run/docker.sock:/var/run/docker.sock:ro
   environment:
     - ELASTIC_USER=elastic
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - ELASTIC_HOSTS=https://es01:9200
     - KIBANA_HOSTS=http://kibana:5601
     - LOGSTASH_HOSTS=http://logstash01:5044
#Logstash   
  logstash01:
   depends_on:
     es01:
       condition: service_healthy
     kibana:
       condition: service_healthy
   image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
   labels:
     co.elastic.logs/module: logstash
   volumes:
     - certs:/usr/share/logstash/certs
     - logstashdata01:/usr/share/logstash/data
     - ./config/logstash/pipeline/logstash_ingest_data/:/usr/share/logstash/ingest_data/
     - ./config/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
   ports:
     - ${LOGSTASH_PORT}:5044
   environment:
     - xpack.security.enabled=false
     - ELASTIC_USER=elastic
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - ELASTIC_HOSTS=https://es01:9200
#InfluxDB2
  influxdb2:
    image: influxdb:2.7.12
    ports:
      - 8086:8086
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
    volumes:
      - type: volume
        source: influxdb2-data
        target: /var/lib/influxdb2
      - type: volume
        source: influxdb2-config
        target: /etc/influxdb2
    healthcheck:
      test: ["CMD-SHELL", "curl -f -H 'Authorization: Bearer ${INFLUXDB_TOKEN}' http://localhost:8086/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
#Telegraf
  telegraf:
    image: telegraf
    depends_on:
      influxdb2:
        condition: service_healthy
    # Optionally, you can switch to depend on influxdb3-enterprise if using that
    environment:
      - INFLUXDB_HOST=${INFLUXDB_HOST}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
      - TELEGRAF_COLLECTION_INTERVAL=${TELEGRAF_COLLECTION_INTERVAL}
      - HOSTNAME=telegraf
    volumes:
      - ./config/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
# 1. Kendi Flask Uygulamamız
  backend:
    build: ./backend  # Dockerfile'ın bulunduğu klasörü gösteriyoruz.
    container_name: ml_backend
    ports:
      - "5000:5000"  # Bilgisayarımızın 5000 portunu konteynerin 5000 portuna bağlıyoruz.
    volumes:
      - ./backend:/app # Koddaki değişiklikleri anında görmek için kodu konteynere bağlıyoruz (geliştirme için).
      - certs:/usr/share/elasticsearch/config/certs:ro
    depends_on: # Bu servislerin başlamasını bekle
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
      influxdb2:
        condition: service_healthy 